#create user with role

create table
  public.users (
    id uuid not null,
    created_at timestamp with time zone null default now(),
    email text null,
    role_id bigint null,
    constraint user_pkey primary key (id),
    constraint user_id_fkey foreign key (id) references auth.users (id) on delete cascade,
    constraint users_role_id_fkey foreign key (role_id) references roles (id) on delete cascade
  ) tablespace pg_default;

create table
  public.roles (
    id bigint generated by default as identity not null,
    name text null,
    created_at timestamp with time zone null default now(),
    description text null,
    constraint roles_pkey primary key (id)
  ) tablespace pg_default;
  
#create a function
    Name: crate_user_on_signup
    Schema: public
    Return type: trigger
    Definition: 
            begin
                INSERT INTO public.users (id, email)
                values (new.id, new.raw_user_meta_data->>'email');
                RETURN NEW;
            end;
    Language: plpgsql
    Type of security: Security Deffiner
#create a trigger
    Name: crate_user_on_signup
    Table: users (auth)
    Events: insert
    Trigger type: after
    Orientation: row
    Function to trigger: crate_user_on_signup

#create profile
  -- Create a table for public profiles
create table profiles (
  id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone,
  username text unique,
  full_name text,
  avatar_url text,
  website text,

  constraint username_length check (char_length(username) >= 3)
);

-- Set up Row Level Security (RLS)
-- See https://supabase.com/docs/guides/auth/row-level-security for more details.
alter table profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check (auth.uid() = id);

create policy "Users can update own profile." on profiles
  for update using (auth.uid() = id);

-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.
-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.
create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Set up Storage!
insert into storage.buckets (id, name)
  values ('avatars', 'avatars');

-- Set up access controls for storage.
-- See https://supabase.com/docs/guides/storage#policy-examples for more details.
create policy "Avatar images are publicly accessible." on storage.objects
  for select using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects
  for insert with check (bucket_id = 'avatars');



  #facebook

  https://www.youtube.com/watch?v=EbV746pWDas




CREATE FUNCTION delete_user_with_service_role(user_id uuid)
RETURNS void AS $$
BEGIN
  DELETE FROM auth.users WHERE id = user_id;
END;
$$ LANGUAGE plpgsql;

GRANT EXECUTE ON FUNCTION delete_user_with_service_role(uuid) TO service_role;


GRANT SELECT ON TABLE auth.users TO service_role;
